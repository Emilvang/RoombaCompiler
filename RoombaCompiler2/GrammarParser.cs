//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ADDARRAY=13, AND=14, OR=15, LT=16, GT=17, 
		GTEQ=18, LTEQ=19, NEQ=20, EQ=21, INTDECL=22, FLOATDECL=23, BOOLDECL=24, 
		LISTDECL=25, VOID=26, IF=27, ELSEIF=28, ELSE=29, WHILE=30, FOR=31, MUL=32, 
		DIV=33, ADD=34, SUB=35, BOOL=36, IDENTIFIER=37, INT=38, FLOAT=39, COMMENT=40, 
		WS=41;
	public const int
		RULE_program = 0, RULE_stmts = 1, RULE_stmt = 2, RULE_var_stmt = 3, RULE_var_decl = 4, 
		RULE_cond_stmt = 5, RULE_if_stmt = 6, RULE_elseif_stmt = 7, RULE_else_stmt = 8, 
		RULE_parameter_decl = 9, RULE_func_stmt = 10, RULE_func_expr = 11, RULE_iter_stmt = 12, 
		RULE_print = 13, RULE_expr = 14, RULE_var_expr = 15, RULE_num_expr = 16, 
		RULE_arithmetic_expr = 17, RULE_logic_expr = 18, RULE_return_stmt = 19, 
		RULE_compileUnit = 20;
	public static readonly string[] ruleNames = {
		"program", "stmts", "stmt", "var_stmt", "var_decl", "cond_stmt", "if_stmt", 
		"elseif_stmt", "else_stmt", "parameter_decl", "func_stmt", "func_expr", 
		"iter_stmt", "print", "expr", "var_expr", "num_expr", "arithmetic_expr", 
		"logic_expr", "return_stmt", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Program'", "'{'", "'}'", "'='", "'['", "']'", "','", "'('", "')'", 
		"'to'", "'print'", "'return'", "'add'", null, null, "'<'", "'>'", "'>='", 
		"'<='", "'!='", "'=='", "'int'", "'float'", "'bool'", "'[]'", "'void'", 
		"'if'", "'elseif'", "'else'", "'while'", "'for'", "'*'", "'/'", "'+'", 
		"'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ADDARRAY", "AND", "OR", "LT", "GT", "GTEQ", "LTEQ", "NEQ", "EQ", 
		"INTDECL", "FLOATDECL", "BOOLDECL", "LISTDECL", "VOID", "IF", "ELSEIF", 
		"ELSE", "WHILE", "FOR", "MUL", "DIV", "ADD", "SUB", "BOOL", "IDENTIFIER", 
		"INT", "FLOAT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		public Func_stmtContext[] func_stmt() {
			return GetRuleContexts<Func_stmtContext>();
		}
		public Func_stmtContext func_stmt(int i) {
			return GetRuleContext<Func_stmtContext>(i);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL) | (1L << VOID))) != 0)) {
				{
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 42; var_decl();
					}
					break;
				case 2:
					{
					State = 43; func_stmt();
					}
					break;
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49; Match(T__0);
			State = 50; Match(T__1);
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 51; stmts();
				}
				break;
			}
			State = 54; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 56; stmt();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Var_stmtContext var_stmt() {
			return GetRuleContext<Var_stmtContext>(0);
		}
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Iter_stmtContext iter_stmt() {
			return GetRuleContext<Iter_stmtContext>(0);
		}
		public Cond_stmtContext cond_stmt() {
			return GetRuleContext<Cond_stmtContext>(0);
		}
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; var_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; var_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; iter_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65; cond_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66; func_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 67; print();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public ITerminalNode ADDARRAY() { return GetToken(GrammarParser.ADDARRAY, 0); }
		public Var_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmtContext var_stmt() {
		Var_stmtContext _localctx = new Var_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_stmt);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; Match(IDENTIFIER);
				State = 71; Match(T__3);
				State = 74;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 72; expr();
					}
					break;
				case 2:
					{
					State = 73; logic_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(IDENTIFIER);
				State = 77; Match(T__4);
				State = 78; expr();
				State = 79; Match(T__5);
				State = 80; Match(T__3);
				State = 83;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 81; expr();
					}
					break;
				case 2:
					{
					State = 82; logic_expr();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; Match(IDENTIFIER);
				State = 86; Match(ADDARRAY);
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 87; expr();
					}
					break;
				case 2:
					{
					State = 88; logic_expr();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public ITerminalNode LISTDECL() { return GetToken(GrammarParser.LISTDECL, 0); }
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_var_decl);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 94; Match(IDENTIFIER);
				State = 95; Match(T__3);
				State = 98;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 96; expr();
					}
					break;
				case 2:
					{
					State = 97; logic_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 101; Match(LISTDECL);
				State = 102; Match(IDENTIFIER);
				State = 103; Match(T__3);
				State = 104; Match(T__4);
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						State = 105; expr();
						}
						break;
					case 2:
						{
						State = 106; logic_expr();
						}
						break;
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__6) {
						{
						{
						State = 109; Match(T__6);
						State = 112;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
						case 1:
							{
							State = 110; expr();
							}
							break;
						case 2:
							{
							State = 111; logic_expr();
							}
							break;
						}
						}
						}
						State = 118;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 121; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_stmtContext : ParserRuleContext {
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public Elseif_stmtContext[] elseif_stmt() {
			return GetRuleContexts<Elseif_stmtContext>();
		}
		public Elseif_stmtContext elseif_stmt(int i) {
			return GetRuleContext<Elseif_stmtContext>(i);
		}
		public Else_stmtContext else_stmt() {
			return GetRuleContext<Else_stmtContext>(0);
		}
		public Cond_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCond_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCond_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_stmtContext cond_stmt() {
		Cond_stmtContext _localctx = new Cond_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_cond_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; if_stmt();
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 125; elseif_stmt();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 131; else_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GrammarParser.IF, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(IF);
			State = 135; logic_expr();
			State = 136; Match(T__1);
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 137; stmts();
				}
				break;
			}
			State = 140; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elseif_stmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(GrammarParser.ELSEIF, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Elseif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElseif_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElseif_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elseif_stmtContext elseif_stmt() {
		Elseif_stmtContext _localctx = new Elseif_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseif_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(ELSEIF);
			State = 143; logic_expr();
			State = 144; Match(T__1);
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 145; stmts();
				}
				break;
			}
			State = 148; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_stmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(GrammarParser.ELSE, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Else_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElse_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElse_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_stmtContext else_stmt() {
		Else_stmtContext _localctx = new Else_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_else_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(ELSE);
			State = 151; Match(T__1);
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 152; stmts();
				}
				break;
			}
			State = 155; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public ITerminalNode LISTDECL() { return GetToken(GrammarParser.LISTDECL, 0); }
		public Parameter_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParameter_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParameter_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declContext parameter_decl() {
		Parameter_declContext _localctx = new Parameter_declContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LISTDECL) {
				{
				State = 158; Match(LISTDECL);
				}
			}

			State = 161; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public Parameter_declContext[] parameter_decl() {
			return GetRuleContexts<Parameter_declContext>();
		}
		public Parameter_declContext parameter_decl(int i) {
			return GetRuleContext<Parameter_declContext>(i);
		}
		public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(GrammarParser.VOID, 0); }
		public Func_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_stmtContext func_stmt() {
		Func_stmtContext _localctx = new Func_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_func_stmt);
		int _la;
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTDECL:
			case FLOATDECL:
			case BOOLDECL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 164; Match(IDENTIFIER);
				State = 165; Match(T__7);
				State = 166; parameter_decl();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 167; Match(T__6);
					State = 168; parameter_decl();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 174; Match(T__8);
				State = 175; Match(T__1);
				State = 177;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 176; stmts();
					}
					break;
				}
				State = 179; return_stmt();
				State = 180; Match(T__2);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; Match(VOID);
				State = 183; Match(IDENTIFIER);
				State = 184; Match(T__7);
				State = 185; parameter_decl();
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 186; Match(T__6);
					State = 187; parameter_decl();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 193; Match(T__8);
				State = 194; Match(T__1);
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 195; stmts();
					}
					break;
				}
				State = 198; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 22, RULE_func_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(IDENTIFIER);
			State = 203; Match(T__7);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 204; expr();
					}
					break;
				case 2:
					{
					State = 205; logic_expr();
					}
					break;
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__6) {
					{
					{
					State = 208; Match(T__6);
					State = 211;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						State = 209; expr();
						}
						break;
					case 2:
						{
						State = 210; logic_expr();
						}
						break;
					}
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 220; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iter_stmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(GrammarParser.WHILE, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(GrammarParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode[] INT() { return GetTokens(GrammarParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(GrammarParser.INT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Iter_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iter_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIter_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIter_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIter_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iter_stmtContext iter_stmt() {
		Iter_stmtContext _localctx = new Iter_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_iter_stmt);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; Match(WHILE);
				State = 223; logic_expr();
				State = 224; Match(T__1);
				State = 226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 225; stmts();
					}
					break;
				}
				State = 228; Match(T__2);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; Match(FOR);
				State = 231; Match(IDENTIFIER);
				State = 232; Match(T__3);
				State = 235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 233; Match(INT);
					}
					break;
				case 2:
					{
					State = 234; expr();
					}
					break;
				}
				State = 237; Match(T__9);
				State = 240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 238; Match(INT);
					}
					break;
				case 2:
					{
					State = 239; expr();
					}
					break;
				}
				State = 242; Match(T__1);
				State = 244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 243; stmts();
					}
					break;
				}
				State = 246; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 26, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T__10);
			State = 252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 250; expr();
				}
				break;
			case 2:
				{
				State = 251; logic_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_exprContext var_expr() {
			return GetRuleContext<Var_exprContext>(0);
		}
		public Num_exprContext num_expr() {
			return GetRuleContext<Num_exprContext>(0);
		}
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(T__7);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 255; expr();
					}
				}

				State = 258; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; var_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; num_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261; func_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262; arithmetic_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_exprContext var_expr() {
		Var_exprContext _localctx = new Var_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_var_expr);
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; Match(IDENTIFIER);
				State = 267; Match(T__4);
				State = 268; expr();
				State = 269; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Num_exprContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(GrammarParser.FLOAT, 0); }
		public Num_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNum_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNum_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Num_exprContext num_expr() {
		Num_exprContext _localctx = new Num_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_num_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_exprContext : ParserRuleContext {
		public IToken op;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GrammarParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GrammarParser.IDENTIFIER, i);
		}
		public ITerminalNode[] FLOAT() { return GetTokens(GrammarParser.FLOAT); }
		public ITerminalNode FLOAT(int i) {
			return GetToken(GrammarParser.FLOAT, i);
		}
		public ITerminalNode[] INT() { return GetTokens(GrammarParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(GrammarParser.INT, i);
		}
		public ITerminalNode[] MUL() { return GetTokens(GrammarParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(GrammarParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(GrammarParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(GrammarParser.DIV, i);
		}
		public ITerminalNode[] ADD() { return GetTokens(GrammarParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(GrammarParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(GrammarParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(GrammarParser.SUB, i);
		}
		public Arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArithmetic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArithmetic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_exprContext arithmetic_expr() {
		Arithmetic_exprContext _localctx = new Arithmetic_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_arithmetic_expr);
		int _la;
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 276;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MUL || _la==DIV) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 277;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 280;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==MUL || _la==DIV );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 283;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ADD || _la==SUB) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 284;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ADD || _la==SUB );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_exprContext : ParserRuleContext {
		public IToken op;
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(GrammarParser.LT, 0); }
		public ITerminalNode LTEQ() { return GetToken(GrammarParser.LTEQ, 0); }
		public ITerminalNode GT() { return GetToken(GrammarParser.GT, 0); }
		public ITerminalNode GTEQ() { return GetToken(GrammarParser.GTEQ, 0); }
		public ITerminalNode[] AND() { return GetTokens(GrammarParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(GrammarParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(GrammarParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(GrammarParser.OR, i);
		}
		public ITerminalNode EQ() { return GetToken(GrammarParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(GrammarParser.NEQ, 0); }
		public Logic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLogic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLogic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_exprContext logic_expr() {
		Logic_exprContext _localctx = new Logic_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_logic_expr);
		int _la;
		try {
			int _alt;
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; Match(T__7);
				State = 292; logic_expr();
				State = 293; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(BOOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; expr();
				State = 297;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 298; expr();
				State = 303;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 299;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 300; logic_expr();
						}
						} 
					}
					State = 305;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 306; expr();
				State = 307;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NEQ || _la==EQ) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 308; expr();
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 309;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 310; logic_expr();
						}
						} 
					}
					State = 315;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_return_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T__11);
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 319; expr();
				}
				break;
			case 2:
				{
				State = 320; logic_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 40, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x148', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '/', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x32', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x37', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\a', '\x3', '<', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '?', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'G', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'M', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\\', '\n', '\x5', '\x5', '\x5', '^', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x65', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'n', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 's', '\n', '\x6', '\a', 
		'\x6', 'u', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'x', '\v', '\x6', 
		'\x5', '\x6', 'z', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '}', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x81', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x84', '\v', '\a', '\x3', '\a', '\x5', '\a', '\x87', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x8D', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x9C', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xA2', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\xAC', '\n', '\f', '\f', '\f', '\xE', '\f', '\xAF', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xB4', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xBF', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xC2', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xC7', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xCB', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xD1', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xD6', '\n', '\r', '\a', '\r', '\xD8', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xDB', '\v', '\r', '\x5', '\r', 
		'\xDD', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xE5', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xEE', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xF3', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xF7', '\n', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xFA', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\xFF', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x103', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x10A', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x112', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\x119', 
		'\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x11A', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x6', '\x13', '\x120', '\n', '\x13', '\r', '\x13', 
		'\xE', '\x13', '\x121', '\x5', '\x13', '\x124', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x130', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x133', '\v', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\x13A', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x13D', 
		'\v', '\x14', '\x5', '\x14', '\x13F', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x144', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x2', '\x2', '\x17', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', '\x2', '\n', '\x3', '\x2', 
		'\x18', '\x1A', '\x3', '\x2', '(', ')', '\x3', '\x2', '\'', ')', '\x3', 
		'\x2', '\"', '#', '\x3', '\x2', '$', '%', '\x3', '\x2', '\x12', '\x15', 
		'\x3', '\x2', '\x10', '\x11', '\x3', '\x2', '\x16', '\x17', '\x2', '\x16A', 
		'\x2', '\x30', '\x3', '\x2', '\x2', '\x2', '\x4', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x46', '\x3', '\x2', '\x2', '\x2', '\b', ']', '\x3', '\x2', 
		'\x2', '\x2', '\n', '|', '\x3', '\x2', '\x2', '\x2', '\f', '~', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x88', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x12', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x16', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x109', '\x3', '\x2', '\x2', '\x2', ' ', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x113', '\x3', '\x2', '\x2', '\x2', '$', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x140', '\x3', '\x2', '\x2', '\x2', '*', '\x145', '\x3', '\x2', 
		'\x2', '\x2', ',', '/', '\x5', '\n', '\x6', '\x2', '-', '/', '\x5', '\x16', 
		'\f', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', '\x3', '\x2', '\x2', '\x34', '\x36', '\a', 
		'\x4', '\x2', '\x2', '\x35', '\x37', '\x5', '\x4', '\x3', '\x2', '\x36', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x5', '\x2', '\x2', '\x39', '\x3', '\x3', '\x2', '\x2', '\x2', ':', '<', 
		'\x5', '\x6', '\x4', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', 'G', '\x5', '\b', '\x5', 
		'\x2', '\x41', 'G', '\x5', '\n', '\x6', '\x2', '\x42', 'G', '\x5', '\x1A', 
		'\xE', '\x2', '\x43', 'G', '\x5', '\f', '\a', '\x2', '\x44', 'G', '\x5', 
		'\x18', '\r', '\x2', '\x45', 'G', '\x5', '\x1C', '\xF', '\x2', '\x46', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x46', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\'', '\x2', '\x2', 'I', 'L', '\a', '\x6', '\x2', '\x2', 
		'J', 'M', '\x5', '\x1E', '\x10', '\x2', 'K', 'M', '\x5', '&', '\x14', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', '^', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\'', '\x2', 
		'\x2', 'O', 'P', '\a', '\a', '\x2', '\x2', 'P', 'Q', '\x5', '\x1E', '\x10', 
		'\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 'R', 'U', '\a', '\x6', '\x2', 
		'\x2', 'S', 'V', '\x5', '\x1E', '\x10', '\x2', 'T', 'V', '\x5', '&', '\x14', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', '^', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\'', '\x2', 
		'\x2', 'X', '[', '\a', '\xF', '\x2', '\x2', 'Y', '\\', '\x5', '\x1E', 
		'\x10', '\x2', 'Z', '\\', '\x5', '&', '\x14', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '^', 
		'\x3', '\x2', '\x2', '\x2', ']', 'H', '\x3', '\x2', '\x2', '\x2', ']', 
		'N', '\x3', '\x2', '\x2', '\x2', ']', 'W', '\x3', '\x2', '\x2', '\x2', 
		'^', '\t', '\x3', '\x2', '\x2', '\x2', '_', '`', '\t', '\x2', '\x2', '\x2', 
		'`', '\x61', '\a', '\'', '\x2', '\x2', '\x61', '\x64', '\a', '\x6', '\x2', 
		'\x2', '\x62', '\x65', '\x5', '\x1E', '\x10', '\x2', '\x63', '\x65', '\x5', 
		'&', '\x14', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\t', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x1B', 
		'\x2', '\x2', 'h', 'i', '\a', '\'', '\x2', '\x2', 'i', 'j', '\a', '\x6', 
		'\x2', '\x2', 'j', 'y', '\a', '\a', '\x2', '\x2', 'k', 'n', '\x5', '\x1E', 
		'\x10', '\x2', 'l', 'n', '\x5', '&', '\x14', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'r', '\a', '\t', '\x2', '\x2', 'p', 's', '\x5', '\x1E', 
		'\x10', '\x2', 'q', 's', '\x5', '&', '\x14', '\x2', 'r', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', 
		'\x2', '\x2', 't', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'm', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '\b', 
		'\x2', '\x2', '|', '_', '\x3', '\x2', '\x2', '\x2', '|', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '}', '\v', '\x3', '\x2', '\x2', '\x2', '~', '\x82', 
		'\x5', '\xE', '\b', '\x2', '\x7F', '\x81', '\x5', '\x10', '\t', '\x2', 
		'\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', '\x5', '\x12', 
		'\n', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x1D', '\x2', '\x2', '\x89', '\x8A', '\x5', '&', 
		'\x14', '\x2', '\x8A', '\x8C', '\a', '\x4', '\x2', '\x2', '\x8B', '\x8D', 
		'\x5', '\x4', '\x3', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\a', '\x5', '\x2', '\x2', '\x8F', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x1E', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '&', '\x14', '\x2', '\x92', '\x94', '\a', '\x4', 
		'\x2', '\x2', '\x93', '\x95', '\x5', '\x4', '\x3', '\x2', '\x94', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x5', 
		'\x2', '\x2', '\x97', '\x11', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', 
		'\a', '\x1F', '\x2', '\x2', '\x99', '\x9B', '\a', '\x4', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', '\x4', '\x3', '\x2', '\x9B', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x5', '\x2', '\x2', 
		'\x9E', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\t', '\x2', 
		'\x2', '\x2', '\xA0', '\xA2', '\a', '\x1B', '\x2', '\x2', '\xA1', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\'', 
		'\x2', '\x2', '\xA4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', 
		'\t', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\'', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\n', '\x2', '\x2', '\xA8', '\xAD', '\x5', '\x14', '\v', 
		'\x2', '\xA9', '\xAA', '\a', '\t', '\x2', '\x2', '\xAA', '\xAC', '\x5', 
		'\x14', '\v', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\v', '\x2', '\x2', '\xB1', '\xB3', '\a', '\x4', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '\x4', '\x3', '\x2', '\xB3', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x5', '(', '\x15', 
		'\x2', '\xB6', '\xB7', '\a', '\x5', '\x2', '\x2', '\xB7', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x1C', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\'', '\x2', '\x2', '\xBA', '\xBB', '\a', '\n', '\x2', '\x2', 
		'\xBB', '\xC0', '\x5', '\x14', '\v', '\x2', '\xBC', '\xBD', '\a', '\t', 
		'\x2', '\x2', '\xBD', '\xBF', '\x5', '\x14', '\v', '\x2', '\xBE', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\v', '\x2', '\x2', 
		'\xC4', '\xC6', '\a', '\x4', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x4', 
		'\x3', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\a', '\x5', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\a', '\'', '\x2', '\x2', '\xCD', '\xDC', '\a', '\n', 
		'\x2', '\x2', '\xCE', '\xD1', '\x5', '\x1E', '\x10', '\x2', '\xCF', '\xD1', 
		'\x5', '&', '\x14', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD5', '\a', '\t', '\x2', '\x2', '\xD3', '\xD6', 
		'\x5', '\x1E', '\x10', '\x2', '\xD4', '\xD6', '\x5', '&', '\x14', '\x2', 
		'\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '\v', '\x2', '\x2', '\xDF', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', ' ', '\x2', '\x2', '\xE1', 
		'\xE2', '\x5', '&', '\x14', '\x2', '\xE2', '\xE4', '\a', '\x4', '\x2', 
		'\x2', '\xE3', '\xE5', '\x5', '\x4', '\x3', '\x2', '\xE4', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x5', '\x2', 
		'\x2', '\xE7', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'!', '\x2', '\x2', '\xE9', '\xEA', '\a', '\'', '\x2', '\x2', '\xEA', '\xED', 
		'\a', '\x6', '\x2', '\x2', '\xEB', '\xEE', '\a', '(', '\x2', '\x2', '\xEC', 
		'\xEE', '\x5', '\x1E', '\x10', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF2', '\a', '\f', '\x2', '\x2', '\xF0', 
		'\xF3', '\a', '(', '\x2', '\x2', '\xF1', '\xF3', '\x5', '\x1E', '\x10', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF6', '\a', '\x4', '\x2', '\x2', '\xF5', '\xF7', '\x5', '\x4', '\x3', 
		'\x2', '\xF6', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xFA', '\a', '\x5', '\x2', '\x2', '\xF9', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFE', '\a', '\r', '\x2', '\x2', '\xFC', 
		'\xFF', '\x5', '\x1E', '\x10', '\x2', '\xFD', '\xFF', '\x5', '&', '\x14', 
		'\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x102', '\a', '\n', '\x2', '\x2', '\x101', '\x103', '\x5', '\x1E', '\x10', 
		'\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x10A', '\a', '\v', '\x2', '\x2', '\x105', '\x10A', '\x5', ' ', 
		'\x11', '\x2', '\x106', '\x10A', '\x5', '\"', '\x12', '\x2', '\x107', 
		'\x10A', '\x5', '\x18', '\r', '\x2', '\x108', '\x10A', '\x5', '$', '\x13', 
		'\x2', '\x109', '\x100', '\x3', '\x2', '\x2', '\x2', '\x109', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x112', '\a', '\'', '\x2', '\x2', '\x10C', '\x10D', '\a', '\'', '\x2', 
		'\x2', '\x10D', '\x10E', '\a', '\a', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\x1E', '\x10', '\x2', '\x10F', '\x110', '\a', '\b', '\x2', '\x2', '\x110', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x112', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\t', '\x3', '\x2', '\x2', '\x114', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x115', '\x118', '\t', '\x4', '\x2', 
		'\x2', '\x116', '\x117', '\t', '\x5', '\x2', '\x2', '\x117', '\x119', 
		'\t', '\x4', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', '\t', '\x4', '\x2', 
		'\x2', '\x11D', '\x11E', '\t', '\x6', '\x2', '\x2', '\x11E', '\x120', 
		'\t', '\x4', '\x2', '\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x123', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x124', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\a', '\n', '\x2', '\x2', '\x126', 
		'\x127', '\x5', '&', '\x14', '\x2', '\x127', '\x128', '\a', '\v', '\x2', 
		'\x2', '\x128', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x129', '\x13F', 
		'\a', '&', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x1E', '\x10', '\x2', 
		'\x12B', '\x12C', '\t', '\a', '\x2', '\x2', '\x12C', '\x131', '\x5', '\x1E', 
		'\x10', '\x2', '\x12D', '\x12E', '\t', '\b', '\x2', '\x2', '\x12E', '\x130', 
		'\x5', '&', '\x14', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x133', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '\x1E', '\x10', '\x2', '\x135', '\x136', 
		'\t', '\t', '\x2', '\x2', '\x136', '\x13B', '\x5', '\x1E', '\x10', '\x2', 
		'\x137', '\x138', '\t', '\b', '\x2', '\x2', '\x138', '\x13A', '\x5', '&', 
		'\x14', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x125', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x13F', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x143', '\a', '\xE', '\x2', '\x2', '\x141', '\x144', 
		'\x5', '\x1E', '\x10', '\x2', '\x142', '\x144', '\x5', '&', '\x14', '\x2', 
		'\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', ')', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x146', '\a', '\x2', '\x2', '\x3', '\x146', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '.', '\x30', '\x36', '=', '\x46', 'L', 'U', '[', ']', '\x64', 
		'm', 'r', 'v', 'y', '|', '\x82', '\x86', '\x8C', '\x94', '\x9B', '\xA1', 
		'\xAD', '\xB3', '\xC0', '\xC6', '\xCA', '\xD0', '\xD5', '\xD9', '\xDC', 
		'\xE4', '\xED', '\xF2', '\xF6', '\xF9', '\xFE', '\x102', '\x109', '\x111', 
		'\x11A', '\x121', '\x123', '\x131', '\x13B', '\x13E', '\x143',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
