//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, ADDARRAY=13, AND=14, OR=15, LT=16, GT=17, 
		GTEQ=18, LTEQ=19, NEQ=20, EQ=21, INTDECL=22, FLOATDECL=23, BOOLDECL=24, 
		LISTDECL=25, VOID=26, IF=27, ELSEIF=28, ELSE=29, WHILE=30, FOR=31, MUL=32, 
		DIV=33, ADD=34, SUB=35, BOOL=36, IDENTIFIER=37, INT=38, FLOAT=39, COMMENT=40, 
		PRINTMESSAGE=41, WS=42;
	public const int
		RULE_program = 0, RULE_stmts = 1, RULE_stmt = 2, RULE_var_decl = 3, RULE_cond_stmt = 4, 
		RULE_if_stmt = 5, RULE_elseif_stmt = 6, RULE_else_stmt = 7, RULE_parameter_decl = 8, 
		RULE_func_stmt = 9, RULE_func_expr = 10, RULE_iter_stmt = 11, RULE_print = 12, 
		RULE_expr = 13, RULE_var_expr = 14, RULE_num_expr = 15, RULE_logic_expr = 16, 
		RULE_var_stmt = 17, RULE_return_stmt = 18, RULE_compileUnit = 19;
	public static readonly string[] ruleNames = {
		"program", "stmts", "stmt", "var_decl", "cond_stmt", "if_stmt", "elseif_stmt", 
		"else_stmt", "parameter_decl", "func_stmt", "func_expr", "iter_stmt", 
		"print", "expr", "var_expr", "num_expr", "logic_expr", "var_stmt", "return_stmt", 
		"compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Program'", "'{'", "'}'", "'='", "'['", "','", "']'", "'('", "')'", 
		"'to'", "'print'", "'return'", "'add'", null, null, "'<'", "'>'", "'>='", 
		"'<='", "'!='", "'=='", "'int'", "'float'", "'bool'", "'[]'", "'void'", 
		"'if'", "'elseif'", "'else'", "'while'", "'for'", "'*'", "'/'", "'+'", 
		"'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ADDARRAY", "AND", "OR", "LT", "GT", "GTEQ", "LTEQ", "NEQ", "EQ", 
		"INTDECL", "FLOATDECL", "BOOLDECL", "LISTDECL", "VOID", "IF", "ELSEIF", 
		"ELSE", "WHILE", "FOR", "MUL", "DIV", "ADD", "SUB", "BOOL", "IDENTIFIER", 
		"INT", "FLOAT", "COMMENT", "PRINTMESSAGE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Var_declContext[] var_decl() {
			return GetRuleContexts<Var_declContext>();
		}
		public Var_declContext var_decl(int i) {
			return GetRuleContext<Var_declContext>(i);
		}
		public Func_stmtContext[] func_stmt() {
			return GetRuleContexts<Func_stmtContext>();
		}
		public Func_stmtContext func_stmt(int i) {
			return GetRuleContext<Func_stmtContext>(i);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL) | (1L << VOID))) != 0)) {
				{
				State = 42;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 40; var_decl();
					}
					break;
				case 2:
					{
					State = 41; func_stmt();
					}
					break;
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47; Match(T__0);
			State = 48; Match(T__1);
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 49; stmts();
				}
				break;
			}
			State = 52; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 54; stmt();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Var_stmtContext var_stmt() {
			return GetRuleContext<Var_stmtContext>(0);
		}
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public Iter_stmtContext iter_stmt() {
			return GetRuleContext<Iter_stmtContext>(0);
		}
		public Cond_stmtContext cond_stmt() {
			return GetRuleContext<Cond_stmtContext>(0);
		}
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; var_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; var_decl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; iter_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; cond_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; func_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 65; print();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LISTDECL() { return GetToken(GrammarParser.LISTDECL, 0); }
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_decl);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 69; Match(IDENTIFIER);
				State = 70; Match(T__3);
				{
				State = 71; expr();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 73; Match(LISTDECL);
				State = 74; Match(IDENTIFIER);
				State = 75; Match(T__3);
				State = 76; Match(T__4);
				State = 85;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 77; expr();
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 78; Match(T__5);
						State = 79; expr();
						}
						}
						State = 84;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 87; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_stmtContext : ParserRuleContext {
		public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		public Elseif_stmtContext[] elseif_stmt() {
			return GetRuleContexts<Elseif_stmtContext>();
		}
		public Elseif_stmtContext elseif_stmt(int i) {
			return GetRuleContext<Elseif_stmtContext>(i);
		}
		public Else_stmtContext else_stmt() {
			return GetRuleContext<Else_stmtContext>(0);
		}
		public Cond_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCond_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCond_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_stmtContext cond_stmt() {
		Cond_stmtContext _localctx = new Cond_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_cond_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; if_stmt();
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 91; elseif_stmt();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 97; else_stmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GrammarParser.IF, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(IF);
			State = 101; logic_expr(0);
			State = 102; Match(T__1);
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 103; stmts();
				}
				break;
			}
			State = 106; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elseif_stmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(GrammarParser.ELSEIF, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Elseif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElseif_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElseif_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elseif_stmtContext elseif_stmt() {
		Elseif_stmtContext _localctx = new Elseif_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_elseif_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(ELSEIF);
			State = 109; logic_expr(0);
			State = 110; Match(T__1);
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 111; stmts();
				}
				break;
			}
			State = 114; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_stmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(GrammarParser.ELSE, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Else_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElse_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElse_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_stmtContext else_stmt() {
		Else_stmtContext _localctx = new Else_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_else_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(ELSE);
			State = 117; Match(T__1);
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 118; stmts();
				}
				break;
			}
			State = 121; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public ITerminalNode LISTDECL() { return GetToken(GrammarParser.LISTDECL, 0); }
		public Parameter_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParameter_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParameter_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declContext parameter_decl() {
		Parameter_declContext _localctx = new Parameter_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LISTDECL) {
				{
				State = 124; Match(LISTDECL);
				}
			}

			State = 127; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		public ITerminalNode INTDECL() { return GetToken(GrammarParser.INTDECL, 0); }
		public ITerminalNode FLOATDECL() { return GetToken(GrammarParser.FLOATDECL, 0); }
		public ITerminalNode BOOLDECL() { return GetToken(GrammarParser.BOOLDECL, 0); }
		public Parameter_declContext[] parameter_decl() {
			return GetRuleContexts<Parameter_declContext>();
		}
		public Parameter_declContext parameter_decl(int i) {
			return GetRuleContext<Parameter_declContext>(i);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(GrammarParser.VOID, 0); }
		public Func_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_stmtContext func_stmt() {
		Func_stmtContext _localctx = new Func_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_func_stmt);
		int _la;
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTDECL:
			case FLOATDECL:
			case BOOLDECL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 130; Match(IDENTIFIER);
				State = 131; Match(T__7);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) {
					{
					State = 132; parameter_decl();
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 133; Match(T__5);
						State = 134; parameter_decl();
						}
						}
						State = 139;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 142; Match(T__8);
				State = 143; Match(T__1);
				State = 145;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 144; stmts();
					}
					break;
				}
				State = 147; return_stmt();
				State = 148; Match(T__2);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; Match(VOID);
				State = 151; Match(IDENTIFIER);
				State = 152; Match(T__7);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTDECL) | (1L << FLOATDECL) | (1L << BOOLDECL))) != 0)) {
					{
					State = 153; parameter_decl();
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 154; Match(T__5);
						State = 155; parameter_decl();
						}
						}
						State = 160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 163; Match(T__8);
				State = 164; Match(T__1);
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 165; stmts();
					}
					break;
				}
				State = 168; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_expr(this);
			else return visitor.VisitChildren(this);
		}

        internal bool Single()
        {
            throw new NotImplementedException();
        }
    }

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_func_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(IDENTIFIER);
			State = 172; Match(T__7);
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 175;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 173; expr();
					}
					break;
				case 2:
					{
					State = 174; logic_expr(0);
					}
					break;
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 177; Match(T__5);
					State = 180;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 178; expr();
						}
						break;
					case 2:
						{
						State = 179; logic_expr(0);
						}
						break;
					}
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 189; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iter_stmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(GrammarParser.WHILE, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(GrammarParser.FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ITerminalNode[] INT() { return GetTokens(GrammarParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(GrammarParser.INT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Iter_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iter_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIter_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIter_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIter_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iter_stmtContext iter_stmt() {
		Iter_stmtContext _localctx = new Iter_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_iter_stmt);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(WHILE);
				State = 192; logic_expr(0);
				State = 193; Match(T__1);
				State = 195;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 194; stmts();
					}
					break;
				}
				State = 197; Match(T__2);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(FOR);
				State = 200; Match(IDENTIFIER);
				State = 201; Match(T__3);
				State = 204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 202; Match(INT);
					}
					break;
				case 2:
					{
					State = 203; expr();
					}
					break;
				}
				State = 206; Match(T__9);
				State = 209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 207; Match(INT);
					}
					break;
				case 2:
					{
					State = 208; expr();
					}
					break;
				}
				State = 211; Match(T__1);
				State = 213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 212; stmts();
					}
					break;
				}
				State = 215; Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PRINTMESSAGE() { return GetToken(GrammarParser.PRINTMESSAGE, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 24, RULE_print);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; Match(T__10);
				State = 219; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; Match(T__10);
				State = 221; Match(PRINTMESSAGE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_exprContext var_expr() {
			return GetRuleContext<Var_exprContext>(0);
		}
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public Num_exprContext num_expr() {
			return GetRuleContext<Num_exprContext>(0);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(T__7);
				State = 226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 225; expr();
					}
					break;
				}
				State = 228; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; var_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; func_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 231; num_expr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232; logic_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_exprContext var_expr() {
		Var_exprContext _localctx = new Var_exprContext(Context, State);
		EnterRule(_localctx, 28, RULE_var_expr);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; Match(IDENTIFIER);
				State = 237; Match(T__4);
				State = 238; expr();
				State = 239; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Num_exprContext : ParserRuleContext {
		public IToken op;
		public Num_exprContext[] num_expr() {
			return GetRuleContexts<Num_exprContext>();
		}
		public Num_exprContext num_expr(int i) {
			return GetRuleContext<Num_exprContext>(i);
		}
		public Var_exprContext var_expr() {
			return GetRuleContext<Var_exprContext>(0);
		}
		public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(GrammarParser.FLOAT, 0); }
		public ITerminalNode MUL() { return GetToken(GrammarParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(GrammarParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(GrammarParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(GrammarParser.SUB, 0); }
		public Num_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNum_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNum_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Num_exprContext num_expr() {
		return num_expr(0);
	}

	private Num_exprContext num_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Num_exprContext _localctx = new Num_exprContext(Context, _parentState);
		Num_exprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_num_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 244; Match(T__7);
				State = 245; num_expr(0);
				State = 246; Match(T__8);
				}
				break;
			case 2:
				{
				State = 248; var_expr();
				}
				break;
			case 3:
				{
				State = 249; func_expr();
				}
				break;
			case 4:
				{
				State = 250; Match(INT);
				}
				break;
			case 5:
				{
				State = 251; Match(FLOAT);
				}
				break;
			case 6:
				{
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 261;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new Num_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_num_expr);
						State = 255;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 256;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 257; num_expr(8);
						}
						break;
					case 2:
						{
						_localctx = new Num_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_num_expr);
						State = 258;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 259;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 260; num_expr(7);
						}
						break;
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logic_exprContext : ParserRuleContext {
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		public Var_exprContext[] var_expr() {
			return GetRuleContexts<Var_exprContext>();
		}
		public Var_exprContext var_expr(int i) {
			return GetRuleContext<Var_exprContext>(i);
		}
		public Func_exprContext[] func_expr() {
			return GetRuleContexts<Func_exprContext>();
		}
		public Func_exprContext func_expr(int i) {
			return GetRuleContext<Func_exprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(GrammarParser.LT, 0); }
		public ITerminalNode LTEQ() { return GetToken(GrammarParser.LTEQ, 0); }
		public ITerminalNode GT() { return GetToken(GrammarParser.GT, 0); }
		public ITerminalNode GTEQ() { return GetToken(GrammarParser.GTEQ, 0); }
		public Num_exprContext[] num_expr() {
			return GetRuleContexts<Num_exprContext>();
		}
		public Num_exprContext num_expr(int i) {
			return GetRuleContext<Num_exprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(GrammarParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(GrammarParser.NEQ, 0); }
		public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public Logic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLogic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLogic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_exprContext logic_expr() {
		return logic_expr(0);
	}

	private Logic_exprContext logic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logic_exprContext _localctx = new Logic_exprContext(Context, _parentState);
		Logic_exprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_logic_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 267; Match(T__7);
				State = 268; logic_expr(0);
				State = 269; Match(T__8);
				}
				break;
			case 2:
				{
				State = 274;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					State = 271; Match(BOOL);
					}
					break;
				case 2:
					{
					State = 272; var_expr();
					}
					break;
				case 3:
					{
					State = 273; func_expr();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 279;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 276; var_expr();
					}
					break;
				case 2:
					{
					State = 277; func_expr();
					}
					break;
				case 3:
					{
					State = 278; num_expr(0);
					}
					break;
				}
				State = 281;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 282; var_expr();
					}
					break;
				case 2:
					{
					State = 283; func_expr();
					}
					break;
				case 3:
					{
					State = 284; num_expr(0);
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 287; var_expr();
					}
					break;
				case 2:
					{
					State = 288; func_expr();
					}
					break;
				case 3:
					{
					State = 289; num_expr(0);
					}
					break;
				}
				State = 292;
				_la = TokenStream.LA(1);
				if ( !(_la==NEQ || _la==EQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 296;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 293; var_expr();
					}
					break;
				case 2:
					{
					State = 294; func_expr();
					}
					break;
				case 3:
					{
					State = 295; num_expr(0);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
					State = 300;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 301;
					_la = TokenStream.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 302; logic_expr(4);
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Var_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public ITerminalNode ADDARRAY() { return GetToken(GrammarParser.ADDARRAY, 0); }
		public Var_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmtContext var_stmt() {
		Var_stmtContext _localctx = new Var_stmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_var_stmt);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 308; Match(IDENTIFIER);
				State = 309; Match(T__3);
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 310; expr();
					}
					break;
				case 2:
					{
					State = 311; logic_expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; Match(IDENTIFIER);
				State = 315; Match(T__4);
				State = 316; expr();
				State = 317; Match(T__6);
				State = 318; Match(T__3);
				State = 321;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 319; expr();
					}
					break;
				case 2:
					{
					State = 320; logic_expr(0);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323; Match(IDENTIFIER);
				State = 324; Match(ADDARRAY);
				State = 327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 325; expr();
					}
					break;
				case 2:
					{
					State = 326; logic_expr(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_return_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(T__11);
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 332; expr();
				}
				break;
			case 2:
				{
				State = 333; logic_expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 38, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return num_expr_sempred((Num_exprContext)_localctx, predIndex);
		case 16: return logic_expr_sempred((Logic_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool num_expr_sempred(Num_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool logic_expr_sempred(Logic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\x155', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '-', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x30', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\x35', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\a', '\x3', ':', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '=', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'S', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'V', '\v', '\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '[', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '_', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x62', '\v', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x65', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'k', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 's', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'z', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x80', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x8A', '\n', '\v', '\f', '\v', '\xE', '\v', '\x8D', '\v', '\v', 
		'\x5', '\v', '\x8F', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x94', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x9F', '\n', '\v', '\f', '\v', '\xE', '\v', '\xA2', 
		'\v', '\v', '\x5', '\v', '\xA4', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xA9', '\n', '\v', '\x3', '\v', '\x5', '\v', 
		'\xAC', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xB2', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xB7', '\n', '\f', '\a', '\f', '\xB9', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xBC', '\v', '\f', '\x5', '\f', '\xBE', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xC6', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xCF', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xD4', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD8', '\n', 
		'\r', '\x3', '\r', '\x5', '\r', '\xDB', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xE1', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE5', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xEC', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xF4', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x100', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x108', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x10B', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x115', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x11A', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x120', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x125', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x12B', '\n', '\x12', '\x5', 
		'\x12', '\x12D', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', '\x132', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x135', 
		'\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x13B', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x144', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x14A', '\n', '\x13', '\x5', '\x13', '\x14C', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x151', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x2', 
		'\x4', ' ', '\"', '\x16', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '\x2', '\b', '\x3', '\x2', '\x18', '\x1A', '\x3', '\x2', 
		'\"', '#', '\x3', '\x2', '$', '%', '\x3', '\x2', '\x12', '\x15', '\x3', 
		'\x2', '\x16', '\x17', '\x3', '\x2', '\x10', '\x11', '\x2', '\x184', '\x2', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x4', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x44', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\\', '\x3', '\x2', '\x2', '\x2', '\f', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'n', '\x3', '\x2', '\x2', '\x2', '\x10', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '}', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x16', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', ' ', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x12C', '\x3', '\x2', '\x2', '\x2', '$', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x14D', '\x3', '\x2', '\x2', '\x2', '(', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '*', '-', '\x5', '\b', '\x5', '\x2', '+', 
		'-', '\x5', '\x14', '\v', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', '\x34', 
		'\a', '\x4', '\x2', '\x2', '\x33', '\x35', '\x5', '\x4', '\x3', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\a', '\x5', '\x2', '\x2', '\x37', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ':', '\x5', '\x6', '\x4', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', 
		'\x45', '\x5', '$', '\x13', '\x2', '?', '\x45', '\x5', '\b', '\x5', '\x2', 
		'@', '\x45', '\x5', '\x18', '\r', '\x2', '\x41', '\x45', '\x5', '\n', 
		'\x6', '\x2', '\x42', '\x45', '\x5', '\x16', '\f', '\x2', '\x43', '\x45', 
		'\x5', '\x1A', '\xE', '\x2', '\x44', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '?', '\x3', '\x2', '\x2', '\x2', '\x44', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\t', '\x2', '\x2', '\x2', 
		'G', 'H', '\a', '\'', '\x2', '\x2', 'H', 'I', '\a', '\x6', '\x2', '\x2', 
		'I', '[', '\x5', '\x1C', '\xF', '\x2', 'J', 'K', '\t', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '\x1B', '\x2', '\x2', 'L', 'M', '\a', '\'', '\x2', '\x2', 
		'M', 'N', '\a', '\x6', '\x2', '\x2', 'N', 'W', '\a', '\a', '\x2', '\x2', 
		'O', 'T', '\x5', '\x1C', '\xF', '\x2', 'P', 'Q', '\a', '\b', '\x2', '\x2', 
		'Q', 'S', '\x5', '\x1C', '\xF', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '[', '\a', '\t', '\x2', '\x2', 'Z', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'J', '\x3', '\x2', '\x2', '\x2', '[', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\\', '`', '\x5', '\f', '\a', '\x2', ']', '_', '\x5', 
		'\xE', '\b', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', 
		'\x10', '\t', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x1D', '\x2', '\x2', 'g', 'h', '\x5', '\"', 
		'\x12', '\x2', 'h', 'j', '\a', '\x4', '\x2', '\x2', 'i', 'k', '\x5', '\x4', 
		'\x3', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x5', 
		'\x2', '\x2', 'm', '\r', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x1E', 
		'\x2', '\x2', 'o', 'p', '\x5', '\"', '\x12', '\x2', 'p', 'r', '\a', '\x4', 
		'\x2', '\x2', 'q', 's', '\x5', '\x4', '\x3', '\x2', 'r', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\a', '\x5', '\x2', '\x2', 'u', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\x1F', '\x2', '\x2', 'w', 'y', '\a', 
		'\x4', '\x2', '\x2', 'x', 'z', '\x5', '\x4', '\x3', '\x2', 'y', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x5', '\x2', '\x2', '|', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\t', '\x2', '\x2', '\x2', '~', 
		'\x80', '\a', '\x1B', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\'', '\x2', '\x2', '\x82', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\t', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\'', '\x2', '\x2', '\x85', '\x8E', '\a', 
		'\n', '\x2', '\x2', '\x86', '\x8B', '\x5', '\x12', '\n', '\x2', '\x87', 
		'\x88', '\a', '\b', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x12', '\n', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\v', '\x2', 
		'\x2', '\x91', '\x93', '\a', '\x4', '\x2', '\x2', '\x92', '\x94', '\x5', 
		'\x4', '\x3', '\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x5', '&', '\x14', '\x2', '\x96', '\x97', '\a', 
		'\x5', '\x2', '\x2', '\x97', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x1C', '\x2', '\x2', '\x99', '\x9A', '\a', '\'', '\x2', 
		'\x2', '\x9A', '\xA3', '\a', '\n', '\x2', '\x2', '\x9B', '\xA0', '\x5', 
		'\x12', '\n', '\x2', '\x9C', '\x9D', '\a', '\b', '\x2', '\x2', '\x9D', 
		'\x9F', '\x5', '\x12', '\n', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\v', '\x2', '\x2', '\xA6', '\xA8', '\a', '\x4', '\x2', 
		'\x2', '\xA7', '\xA9', '\x5', '\x4', '\x3', '\x2', '\xA8', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\a', '\x5', '\x2', 
		'\x2', '\xAB', '\x83', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\'', '\x2', '\x2', '\xAE', '\xBD', '\a', '\n', '\x2', '\x2', 
		'\xAF', '\xB2', '\x5', '\x1C', '\xF', '\x2', '\xB0', '\xB2', '\x5', '\"', 
		'\x12', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB6', '\a', '\b', '\x2', '\x2', '\xB4', '\xB7', '\x5', '\x1C', 
		'\xF', '\x2', '\xB5', '\xB7', '\x5', '\"', '\x12', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '\v', '\x2', '\x2', '\xC0', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC2', '\a', ' ', '\x2', '\x2', '\xC2', '\xC3', 
		'\x5', '\"', '\x12', '\x2', '\xC3', '\xC5', '\a', '\x4', '\x2', '\x2', 
		'\xC4', '\xC6', '\x5', '\x4', '\x3', '\x2', '\xC5', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x5', '\x2', '\x2', 
		'\xC8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '!', 
		'\x2', '\x2', '\xCA', '\xCB', '\a', '\'', '\x2', '\x2', '\xCB', '\xCE', 
		'\a', '\x6', '\x2', '\x2', '\xCC', '\xCF', '\a', '(', '\x2', '\x2', '\xCD', 
		'\xCF', '\x5', '\x1C', '\xF', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD3', '\a', '\f', '\x2', '\x2', '\xD1', 
		'\xD4', '\a', '(', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x1C', '\xF', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD7', '\a', '\x4', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x4', '\x3', 
		'\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDB', '\a', '\x5', '\x2', '\x2', '\xDA', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\r', '\x2', '\x2', '\xDD', 
		'\xE1', '\x5', '\x1C', '\xF', '\x2', '\xDE', '\xDF', '\a', '\r', '\x2', 
		'\x2', '\xDF', '\xE1', '\a', '+', '\x2', '\x2', '\xE0', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', '\n', '\x2', 
		'\x2', '\xE3', '\xE5', '\x5', '\x1C', '\xF', '\x2', '\xE4', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xEC', '\a', '\v', '\x2', 
		'\x2', '\xE7', '\xEC', '\x5', '\x1E', '\x10', '\x2', '\xE8', '\xEC', '\x5', 
		'\x16', '\f', '\x2', '\xE9', '\xEC', '\x5', ' ', '\x11', '\x2', '\xEA', 
		'\xEC', '\x5', '\"', '\x12', '\x2', '\xEB', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF4', '\a', '\'', '\x2', '\x2', '\xEE', '\xEF', '\a', 
		'\'', '\x2', '\x2', '\xEF', '\xF0', '\a', '\a', '\x2', '\x2', '\xF0', 
		'\xF1', '\x5', '\x1C', '\xF', '\x2', '\xF1', '\xF2', '\a', '\t', '\x2', 
		'\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\b', '\x11', '\x1', 
		'\x2', '\xF6', '\xF7', '\a', '\n', '\x2', '\x2', '\xF7', '\xF8', '\x5', 
		' ', '\x11', '\x2', '\xF8', '\xF9', '\a', '\v', '\x2', '\x2', '\xF9', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x100', '\x5', '\x1E', '\x10', 
		'\x2', '\xFB', '\x100', '\x5', '\x16', '\f', '\x2', '\xFC', '\x100', '\a', 
		'(', '\x2', '\x2', '\xFD', '\x100', '\a', ')', '\x2', '\x2', '\xFE', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x109', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\f', 
		'\t', '\x2', '\x2', '\x102', '\x103', '\t', '\x3', '\x2', '\x2', '\x103', 
		'\x108', '\x5', ' ', '\x11', '\n', '\x104', '\x105', '\f', '\b', '\x2', 
		'\x2', '\x105', '\x106', '\t', '\x4', '\x2', '\x2', '\x106', '\x108', 
		'\x5', ' ', '\x11', '\t', '\x107', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x104', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\b', '\x12', '\x1', '\x2', '\x10D', '\x10E', '\a', '\n', '\x2', '\x2', 
		'\x10E', '\x10F', '\x5', '\"', '\x12', '\x2', '\x10F', '\x110', '\a', 
		'\v', '\x2', '\x2', '\x110', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x115', '\a', '&', '\x2', '\x2', '\x112', '\x115', '\x5', '\x1E', '\x10', 
		'\x2', '\x113', '\x115', '\x5', '\x16', '\f', '\x2', '\x114', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x11A', '\x5', '\x1E', '\x10', '\x2', '\x117', 
		'\x11A', '\x5', '\x16', '\f', '\x2', '\x118', '\x11A', '\x5', ' ', '\x11', 
		'\x2', '\x119', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11F', '\t', 
		'\x5', '\x2', '\x2', '\x11C', '\x120', '\x5', '\x1E', '\x10', '\x2', '\x11D', 
		'\x120', '\x5', '\x16', '\f', '\x2', '\x11E', '\x120', '\x5', ' ', '\x11', 
		'\x2', '\x11F', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x121', '\x125', '\x5', 
		'\x1E', '\x10', '\x2', '\x122', '\x125', '\x5', '\x16', '\f', '\x2', '\x123', 
		'\x125', '\x5', ' ', '\x11', '\x2', '\x124', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x12A', '\t', '\x6', '\x2', '\x2', '\x127', '\x12B', '\x5', 
		'\x1E', '\x10', '\x2', '\x128', '\x12B', '\x5', '\x16', '\f', '\x2', '\x129', 
		'\x12B', '\x5', ' ', '\x11', '\x2', '\x12A', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x119', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\f', '\x5', '\x2', '\x2', '\x12F', '\x130', 
		'\t', '\a', '\x2', '\x2', '\x130', '\x132', '\x5', '\"', '\x12', '\x6', 
		'\x131', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\a', '\'', '\x2', '\x2', '\x137', '\x13A', '\a', '\x6', '\x2', '\x2', 
		'\x138', '\x13B', '\x5', '\x1C', '\xF', '\x2', '\x139', '\x13B', '\x5', 
		'\"', '\x12', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\a', '\'', '\x2', '\x2', '\x13D', '\x13E', '\a', 
		'\a', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\x1C', '\xF', '\x2', '\x13F', 
		'\x140', '\a', '\t', '\x2', '\x2', '\x140', '\x143', '\a', '\x6', '\x2', 
		'\x2', '\x141', '\x144', '\x5', '\x1C', '\xF', '\x2', '\x142', '\x144', 
		'\x5', '\"', '\x12', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\'', '\x2', '\x2', '\x146', 
		'\x149', '\a', '\xF', '\x2', '\x2', '\x147', '\x14A', '\x5', '\x1C', '\xF', 
		'\x2', '\x148', '\x14A', '\x5', '\"', '\x12', '\x2', '\x149', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x14C', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x150', '\a', '\xE', '\x2', '\x2', '\x14E', '\x151', 
		'\x5', '\x1C', '\xF', '\x2', '\x14F', '\x151', '\x5', '\"', '\x12', '\x2', 
		'\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\'', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x153', '\a', '\x2', '\x2', '\x3', '\x153', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x33', ',', '.', '\x34', ';', '\x44', 'T', 'W', 'Z', '`', '\x64', 
		'j', 'r', 'y', '\x7F', '\x8B', '\x8E', '\x93', '\xA0', '\xA3', '\xA8', 
		'\xAB', '\xB1', '\xB6', '\xBA', '\xBD', '\xC5', '\xCE', '\xD3', '\xD7', 
		'\xDA', '\xE0', '\xE4', '\xEB', '\xF3', '\xFF', '\x107', '\x109', '\x114', 
		'\x119', '\x11F', '\x124', '\x12A', '\x12C', '\x133', '\x13A', '\x143', 
		'\x149', '\x14B', '\x150',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
