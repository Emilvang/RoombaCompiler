//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, AND=12, OR=13, LT=14, GT=15, GTEQ=16, LTEQ=17, NEQ=18, 
		EQ=19, IF=20, ELSEIF=21, ELSE=22, WHILE=23, MUL=24, DIV=25, ADD=26, SUB=27, 
		BOOL=28, IDENTIFIER=29, INT=30, FLOAT=31, COMMENT=32, WS=33;
	public const int
		RULE_program = 0, RULE_stmts = 1, RULE_stmt = 2, RULE_var_stmt = 3, RULE_cond_stmt = 4, 
		RULE_func_stmt = 5, RULE_function_expr = 6, RULE_iter_stmt = 7, RULE_print = 8, 
		RULE_expr = 9, RULE_var_expr = 10, RULE_num_expr = 11, RULE_logic_expr = 12, 
		RULE_return_stmt = 13, RULE_compileUnit = 14;
	public static readonly string[] ruleNames = {
		"program", "stmts", "stmt", "var_stmt", "cond_stmt", "func_stmt", "function_expr", 
		"iter_stmt", "print", "expr", "var_expr", "num_expr", "logic_expr", "return_stmt", 
		"compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Program'", "'{'", "'}'", "'='", "'['", "','", "']'", "'('", "')'", 
		"'print'", "'return'", null, null, "'<'", "'>'", "'>='", "'<='", "'!='", 
		"'=='", "'if'", "'elseif'", "'else'", "'while'", "'*'", "'/'", "'+'", 
		"'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"AND", "OR", "LT", "GT", "GTEQ", "LTEQ", "NEQ", "EQ", "IF", "ELSEIF", 
		"ELSE", "WHILE", "MUL", "DIV", "ADD", "SUB", "BOOL", "IDENTIFIER", "INT", 
		"FLOAT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Var_stmtContext[] var_stmt() {
			return GetRuleContexts<Var_stmtContext>();
		}
		public Var_stmtContext var_stmt(int i) {
			return GetRuleContext<Var_stmtContext>(i);
		}
		public Func_stmtContext[] func_stmt() {
			return GetRuleContexts<Func_stmtContext>();
		}
		public Func_stmtContext func_stmt(int i) {
			return GetRuleContext<Func_stmtContext>(i);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 30; var_stmt();
					}
					break;
				case 2:
					{
					State = 31; func_stmt();
					}
					break;
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37; Match(T__0);
			State = 38; Match(T__1);
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 39; stmts();
				}
				break;
			}
			State = 42; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << IF) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 44; stmt();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public Var_stmtContext var_stmt() {
			return GetRuleContext<Var_stmtContext>(0);
		}
		public Func_stmtContext func_stmt() {
			return GetRuleContext<Func_stmtContext>(0);
		}
		public Iter_stmtContext iter_stmt() {
			return GetRuleContext<Iter_stmtContext>(0);
		}
		public Cond_stmtContext cond_stmt() {
			return GetRuleContext<Cond_stmtContext>(0);
		}
		public Function_exprContext function_expr() {
			return GetRuleContext<Function_exprContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; var_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; func_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; iter_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53; cond_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54; function_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55; print();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Var_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_stmtContext var_stmt() {
		Var_stmtContext _localctx = new Var_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_stmt);
		int _la;
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; Match(IDENTIFIER);
				State = 59; Match(T__3);
				State = 60; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; Match(IDENTIFIER);
				State = 62; Match(T__3);
				State = 63; Match(T__4);
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 64; expr();
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 65; Match(T__5);
						State = 66; expr();
						}
						}
						State = 71;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 74; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_stmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GrammarParser.IF, 0); }
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		public ITerminalNode[] ELSEIF() { return GetTokens(GrammarParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(GrammarParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(GrammarParser.ELSE, 0); }
		public Cond_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCond_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCond_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_stmtContext cond_stmt() {
		Cond_stmtContext _localctx = new Cond_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_cond_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(IF);
			State = 78; logic_expr();
			State = 79; Match(T__1);
			State = 81;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 80; stmts();
				}
				break;
			}
			State = 83; Match(T__2);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 84; Match(ELSEIF);
				State = 85; logic_expr();
				State = 86; Match(T__1);
				State = 88;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 87; stmts();
					}
					break;
				}
				State = 90; Match(T__2);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 97; Match(ELSE);
				State = 98; Match(T__1);
				State = 100;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 99; stmts();
					}
					break;
				}
				State = 102; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_stmtContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		public Func_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunc_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunc_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_stmtContext func_stmt() {
		Func_stmtContext _localctx = new Func_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_func_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(IDENTIFIER);
			State = 106; Match(T__7);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 107; expr();
				}
			}

			State = 110; Match(T__8);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 111; Match(T__1);
				State = 113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 112; stmts();
					}
					break;
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__10) {
					{
					State = 115; return_stmt();
					}
				}

				State = 118; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_exprContext function_expr() {
		Function_exprContext _localctx = new Function_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(IDENTIFIER);
			State = 122; Match(T__7);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				State = 123; expr();
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 124; Match(T__5);
					State = 125; expr();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 133; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iter_stmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(GrammarParser.WHILE, 0); }
		public Logic_exprContext logic_expr() {
			return GetRuleContext<Logic_exprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public Iter_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iter_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIter_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIter_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIter_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iter_stmtContext iter_stmt() {
		Iter_stmtContext _localctx = new Iter_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_iter_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(WHILE);
			State = 136; logic_expr();
			State = 137; Match(T__1);
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 138; stmts();
				}
				break;
			}
			State = 141; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 16, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(T__9);
			State = 144; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Var_exprContext var_expr() {
			return GetRuleContext<Var_exprContext>(0);
		}
		public Num_exprContext num_expr() {
			return GetRuleContext<Num_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_expr);
		int _la;
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; Match(T__7);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << IDENTIFIER) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 147; expr();
					}
				}

				State = 150; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; var_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; num_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarParser.IDENTIFIER, 0); }
		public Num_exprContext num_expr() {
			return GetRuleContext<Num_exprContext>(0);
		}
		public Var_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterVar_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitVar_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_exprContext var_expr() {
		Var_exprContext _localctx = new Var_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_var_expr);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(IDENTIFIER);
				State = 157; Match(T__4);
				State = 158; num_expr(0);
				State = 159; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Num_exprContext : ParserRuleContext {
		public IToken op;
		public Var_exprContext var_expr() {
			return GetRuleContext<Var_exprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(GrammarParser.FLOAT, 0); }
		public Num_exprContext[] num_expr() {
			return GetRuleContexts<Num_exprContext>();
		}
		public Num_exprContext num_expr(int i) {
			return GetRuleContext<Num_exprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(GrammarParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(GrammarParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(GrammarParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(GrammarParser.SUB, 0); }
		public Num_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNum_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNum_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Num_exprContext num_expr() {
		return num_expr(0);
	}

	private Num_exprContext num_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Num_exprContext _localctx = new Num_exprContext(Context, _parentState);
		Num_exprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_num_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 164; var_expr();
				}
				break;
			case INT:
				{
				State = 165; Match(INT);
				}
				break;
			case FLOAT:
				{
				State = 166; Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new Num_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_num_expr);
						State = 169;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 170;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 171; num_expr(6);
						}
						break;
					case 2:
						{
						_localctx = new Num_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_num_expr);
						State = 172;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 173;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 174; num_expr(5);
						}
						break;
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logic_exprContext : ParserRuleContext {
		public IToken op;
		public Logic_exprContext[] logic_expr() {
			return GetRuleContexts<Logic_exprContext>();
		}
		public Logic_exprContext logic_expr(int i) {
			return GetRuleContext<Logic_exprContext>(i);
		}
		public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(GrammarParser.LT, 0); }
		public ITerminalNode LTEQ() { return GetToken(GrammarParser.LTEQ, 0); }
		public ITerminalNode GT() { return GetToken(GrammarParser.GT, 0); }
		public ITerminalNode GTEQ() { return GetToken(GrammarParser.GTEQ, 0); }
		public ITerminalNode[] AND() { return GetTokens(GrammarParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(GrammarParser.AND, i);
		}
		public ITerminalNode[] OR() { return GetTokens(GrammarParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(GrammarParser.OR, i);
		}
		public ITerminalNode EQ() { return GetToken(GrammarParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(GrammarParser.NEQ, 0); }
		public Logic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLogic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLogic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_exprContext logic_expr() {
		Logic_exprContext _localctx = new Logic_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_logic_expr);
		int _la;
		try {
			int _alt;
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; Match(T__7);
				State = 181; logic_expr();
				State = 182; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; Match(BOOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; expr();
				State = 186;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 187; expr();
				State = 192;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 188;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 189; logic_expr();
						}
						} 
					}
					State = 194;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195; expr();
				State = 196;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NEQ || _la==EQ) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 197; expr();
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 198;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 199; logic_expr();
						}
						} 
					}
					State = 204;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_return_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(T__10);
			State = 208; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 28, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return num_expr_sempred((Num_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool num_expr_sempred(Num_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\xD7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '&', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', '\x30', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x33', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x46', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'I', '\v', '\x5', '\x5', '\x5', 'K', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'N', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'T', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '[', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '_', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', '\x62', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'g', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'j', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'o', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 't', 
		'\n', '\a', '\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', '\a', '\x5', 
		'\a', 'z', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x81', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x84', '\v', '\b', '\x5', '\b', '\x86', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x97', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x9C', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xA4', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xAA', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\xB2', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB5', '\v', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\xC1', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC4', '\v', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\xCB', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xCE', '\v', '\xE', '\x5', 
		'\xE', '\xD0', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x3', '\x18', '\x11', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', '\a', '\x3', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x10', '\x13', '\x3', 
		'\x2', '\xE', '\xF', '\x3', '\x2', '\x14', '\x15', '\x2', '\xEC', '\x2', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'O', '\x3', '\x2', '\x2', '\x2', '\f', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '{', '\x3', '\x2', '\x2', '\x2', '\x10', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xD4', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x5', '\b', '\x5', 
		'\x2', '!', '#', '\x5', '\f', '\a', '\x2', '\"', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '&', '\x3', '\x2', 
		'\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '\'', '\x3', '\x2', '\x2', '\x2', '&', '$', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x3', '\x2', '\x2', '(', 
		'*', '\a', '\x4', '\x2', '\x2', ')', '+', '\x5', '\x4', '\x3', '\x2', 
		'*', ')', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x5', '\x2', '\x2', 
		'-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x6', '\x4', 
		'\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', ';', '\x5', '\b', 
		'\x5', '\x2', '\x35', ';', '\x5', '\f', '\a', '\x2', '\x36', ';', '\x5', 
		'\x10', '\t', '\x2', '\x37', ';', '\x5', '\n', '\x6', '\x2', '\x38', ';', 
		'\x5', '\xE', '\b', '\x2', '\x39', ';', '\x5', '\x12', '\n', '\x2', ':', 
		'\x34', '\x3', '\x2', '\x2', '\x2', ':', '\x35', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x36', '\x3', '\x2', '\x2', '\x2', ':', '\x37', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\a', '\x1F', '\x2', '\x2', '=', '>', '\a', '\x6', '\x2', '\x2', '>', 
		'N', '\x5', '\x14', '\v', '\x2', '?', '@', '\a', '\x1F', '\x2', '\x2', 
		'@', '\x41', '\a', '\x6', '\x2', '\x2', '\x41', 'J', '\a', '\a', '\x2', 
		'\x2', '\x42', 'G', '\x5', '\x14', '\v', '\x2', '\x43', '\x44', '\a', 
		'\b', '\x2', '\x2', '\x44', '\x46', '\x5', '\x14', '\v', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x42', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\a', 
		'\t', '\x2', '\x2', 'M', '<', '\x3', '\x2', '\x2', '\x2', 'M', '?', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'P', 
		'\a', '\x16', '\x2', '\x2', 'P', 'Q', '\x5', '\x1A', '\xE', '\x2', 'Q', 
		'S', '\a', '\x4', '\x2', '\x2', 'R', 'T', '\x5', '\x4', '\x3', '\x2', 
		'S', 'R', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', '`', '\a', '\x5', '\x2', '\x2', 
		'V', 'W', '\a', '\x17', '\x2', '\x2', 'W', 'X', '\x5', '\x1A', '\xE', 
		'\x2', 'X', 'Z', '\a', '\x4', '\x2', '\x2', 'Y', '[', '\x5', '\x4', '\x3', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\x5', 
		'\x2', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 'V', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x18', '\x2', '\x2', '\x64', '\x66', '\a', '\x4', 
		'\x2', '\x2', '\x65', 'g', '\x5', '\x4', '\x3', '\x2', '\x66', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\a', '\x5', '\x2', '\x2', 
		'i', '\x63', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\v', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x1F', 
		'\x2', '\x2', 'l', 'n', '\a', '\n', '\x2', '\x2', 'm', 'o', '\x5', '\x14', 
		'\v', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'y', '\a', '\v', 
		'\x2', '\x2', 'q', 's', '\a', '\x4', '\x2', '\x2', 'r', 't', '\x5', '\x4', 
		'\x3', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', 
		'\x2', '\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x5', '\x1C', 
		'\xF', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\a', '\x5', 
		'\x2', '\x2', 'y', 'q', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\r', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x1F', 
		'\x2', '\x2', '|', '\x85', '\a', '\n', '\x2', '\x2', '}', '\x82', '\x5', 
		'\x14', '\v', '\x2', '~', '\x7F', '\a', '\b', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x14', '\v', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', 
		'\v', '\x2', '\x2', '\x88', '\xF', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x19', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x1A', '\xE', 
		'\x2', '\x8B', '\x8D', '\a', '\x4', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\x4', '\x3', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\x5', '\x2', '\x2', '\x90', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '\f', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\x14', '\v', '\x2', '\x93', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x96', '\a', '\n', '\x2', '\x2', '\x95', '\x97', '\x5', 
		'\x14', '\v', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9C', '\a', '\v', '\x2', '\x2', '\x99', '\x9C', '\x5', 
		'\x16', '\f', '\x2', '\x9A', '\x9C', '\x5', '\x18', '\r', '\x2', '\x9B', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\xA4', '\a', '\x1F', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x1F', '\x2', '\x2', '\x9F', '\xA0', '\a', '\a', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x18', '\r', '\x2', '\xA1', '\xA2', '\a', 
		'\t', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\b', 
		'\r', '\x1', '\x2', '\xA6', '\xAA', '\x5', '\x16', '\f', '\x2', '\xA7', 
		'\xAA', '\a', ' ', '\x2', '\x2', '\xA8', '\xAA', '\a', '!', '\x2', '\x2', 
		'\xA9', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\f', '\a', '\x2', '\x2', 
		'\xAC', '\xAD', '\t', '\x2', '\x2', '\x2', '\xAD', '\xB2', '\x5', '\x18', 
		'\r', '\b', '\xAE', '\xAF', '\f', '\x6', '\x2', '\x2', '\xAF', '\xB0', 
		'\t', '\x3', '\x2', '\x2', '\xB0', '\xB2', '\x5', '\x18', '\r', '\a', 
		'\xB1', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB7', '\a', '\n', '\x2', '\x2', '\xB7', '\xB8', 
		'\x5', '\x1A', '\xE', '\x2', '\xB8', '\xB9', '\a', '\v', '\x2', '\x2', 
		'\xB9', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xD0', '\a', '\x1E', 
		'\x2', '\x2', '\xBB', '\xBC', '\x5', '\x14', '\v', '\x2', '\xBC', '\xBD', 
		'\t', '\x4', '\x2', '\x2', '\xBD', '\xC2', '\x5', '\x14', '\v', '\x2', 
		'\xBE', '\xBF', '\t', '\x5', '\x2', '\x2', '\xBF', '\xC1', '\x5', '\x1A', 
		'\xE', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', 
		'\x5', '\x14', '\v', '\x2', '\xC6', '\xC7', '\t', '\x6', '\x2', '\x2', 
		'\xC7', '\xCC', '\x5', '\x14', '\v', '\x2', '\xC8', '\xC9', '\t', '\x5', 
		'\x2', '\x2', '\xC9', '\xCB', '\x5', '\x1A', '\xE', '\x2', '\xCA', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\r', '\x2', '\x2', 
		'\xD2', '\xD3', '\x5', '\x14', '\v', '\x2', '\xD3', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\a', '\x2', '\x2', '\x3', '\xD5', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '$', '*', '\x31', ':', 'G', 
		'J', 'M', 'S', 'Z', '`', '\x66', 'i', 'n', 's', 'v', 'y', '\x82', '\x85', 
		'\x8D', '\x96', '\x9B', '\xA3', '\xA9', '\xB1', '\xB3', '\xC2', '\xCC', 
		'\xCF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
